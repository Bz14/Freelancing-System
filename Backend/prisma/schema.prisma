// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String       @id @default(uuid())
  name                     String
  email                    String       @unique
  password                 String
  verificationToken        String
  verificationTokenExpires DateTime     @default(now())
  isFreelancer             Boolean      @default(false)
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  isVerified               Boolean      @default(false)
  profilePic               String       @default("")
  //freelancer Freelancer? @relation(fields: [id], references: [userId])
  //client     Client?     @relation(fields: [id], references: [userId])
  Client                   Client[]
  Freelancer               Freelancer[]
}

enum Role {
  CLIENT
  FREELANCER
}

model Client {
  id      String  @id @default(uuid())
  user    User    @relation(fields: [id], references: [id])
  company String?
  job     Job[]
}

model Freelancer {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [id], references: [id])
  skills     String[]
  experience String?
  rating     Float?
  // appliedJobs Job[]   @relation("AppliedJobs", references: [id])
}

model Job {
  id              String   @id @default(uuid())
  title           String
  description     String
  details         String?
  company         String?
  skills          String[]
  experienceLevel String
  deadline        DateTime
  postedTime      DateTime @default(now())
  paymentType     String
  paymentAmount   Float
  location        String?
  status          String?  @default("Open")
  proposalsSent   Int?     @default(0)
  rating          Float?
  clientId        String
  client          Client   @relation(fields: [clientId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

//CREATE TABLE proposals (
//  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
// job_id UUID REFERENCES jobs(id) ON DELETE CASCADE,
//freelancer_id UUID REFERENCES users(id) ON DELETE CASCADE,
//amount DECIMAL(10,2) NOT NULL, -- Proposed price
//message TEXT NOT NULL,
//status VARCHAR(20) CHECK (status IN ('pending', 'accepted', 'rejected')) DEFAULT 'pending',
//created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
//);
